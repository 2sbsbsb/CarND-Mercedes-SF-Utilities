
#include "fusion_ukf.h"

#include "Eigen/Dense"
#include <iostream>


using namespace std;
using Eigen::MatrixXd;
using Eigen::VectorXd;
using std::vector;



FusionEKF::FusionEKF() {

	is_initialized_ = false;
	previous_timestamp_ = 0;

	R_laser_ = MatrixXd(2, 2);
	R_radar_ = MatrixXd(3, 3);
	H_laser_ = MatrixXd(2, 4);
	Hj_ = MatrixXd(3, 4);
	
	// x,y
	R_laser_ << 2, 0,
			0, 2;

	// r, theta, r_dot
	R_radar_ << 0.1, 0, 0,
			0, 0.001, 0,	// as the range of theta is small [-pi,pi], var=0.1 means too high unceratinty
			0, 0, 0.1;

	H_laser_ << 1, 0, 0, 0,
			0, 1, 0, 0;

	ukf_.F_ = MatrixXd(4, 4);
	//we consider that the delta_t is constant (1 sec)
	ukf_.F_ << 1, 0, 1, 0,
			0, 1, 0, 1,
			0, 0, 1, 0,
			0, 0, 0, 1;

	//process noise parameters
	noise_acc_per_sec = 2.0;	//acc in m/s^2 per sec
	noise_yaw_acc_per_sec = 3.0;//yaw acc in rad/s^2 per sec

	//UKF params
	n_aug = 7;
	kappa = 3-n_aug;

	//push weight
	w.push_back(kappa/(kappa+n_aug));
	for(int i = 1; i < 2*n_aug+1; i++){
	  w.push_back(0.5/(n_aug+kappa));
	}
}

FusionEKF::~FusionEKF() {

}

void FusionEKF::ProcessMeasurement(const MeasurementPackage &measurement_pack) {

	/*******************************************************************************
	 *  Process Linear Kalman Filter
	 *******************************************************************************/

	/*******************************************************************************
	 *  Prediction
	 *******************************************************************************/
	if(!is_initialized_){

		cout << "EKF: " << endl;
		ukf_.x_ = VectorXd(5);	//x = [px; py; v; yaw; yaw_dot];
		ukf_.x_ << 0.1,0.1,0.1,0.1, 0.01;
		if(measurement_pack.sensor_type_ == MeasurementPackage::RADAR){
			ukf_.x_(0) = measurement_pack.raw_measurements_(0)*cos(measurement_pack.raw_measurements_(1));
			ukf_.x_(1) = measurement_pack.raw_measurements_(0)*sin(measurement_pack.raw_measurements_(1));
		} else if(measurement_pack.sensor_type_ == MeasurementPackage::LASER){
			ukf_.x_(0) = measurement_pack.raw_measurements_(0);
			ukf_.x_(1) = measurement_pack.raw_measurements_(1);
		}

		ukf_.P_ = MatrixXd(5, 5);
		ukf_.P_ << 0.2, 0, 0, 0, 0,
				   0, 0.2, 0, 0, 0,
				   0, 0, 0.2, 0, 0,
				   0, 0, 0, 0.3, 0,
				   0, 0, 0, 0, 0.3;

		previous_timestamp_ = measurement_pack.timestamp_;
		is_initialized_ = true;
		return;
	}

	/*******************************************************************************
	 *  Prediction
	 *******************************************************************************/
	//compute the time elapsed between the current and previous measurements
	float dt = (measurement_pack.timestamp_ - previous_timestamp_)/1000000.0;	//dt - expressed in seconds
	previous_timestamp_ = measurement_pack.timestamp_;

	float std_a = std::max(0.0001f, noise_acc_per_sec*dt);     	// process noise long. acceleration
    float std_ydd = std::max(0.0001f, noise_yaw_acc_per_sec*dt);	// process noise yaw acceleration

    VectorXd x_aug(7);
    x_aug << ukf_.x_, 0, 0;
    cout << "x_aug" << x_aug << endl;


//	if(measurement_pack.sensor_type_ == MeasurementPackage::RADAR){
//		//recover state parameters
//		float x = ekf_.x_(0);
//		float y = ekf_.x_(1);
//		float vx = ekf_.x_(2);
//		float vy = ekf_.x_(3);
//
//		if (x==0 && y==0) return; // to avoid NaN
//		MatrixXd Hj = CalculateJacobian(ekf_.x_);
//
//		ekf_.H_ = Hj;
//		ekf_.R_ = R_radar_;
//
//		// update manually with nonlinear measurement function
//		/* radar coordinates polar coordinates */
//		float ro = sqrt(x*x+y*y);
//		float theta = atan2(y,x);
//		float ro_dot = (x*vx+y*vy)/ro;
//		VectorXd z_pred(3);
//		z_pred << ro, theta, ro_dot;
//
//
//		ekf_.UpdateWithAlreadyPredictedMeasurements(measurement_pack.raw_measurements_,z_pred);
//
//	}else{
//		ekf_.H_ = H_laser_;
//		ekf_.R_ = R_laser_;
//		ekf_.Update(measurement_pack.raw_measurements_);
//	}

//	std::cout << "x_= " << ukf_.x_ << std::endl;
//	std::cout << "P_= " << ukf_.P_ << std::endl;
}

MatrixXd FusionEKF::CalculateJacobian(const VectorXd& x_state) {
	MatrixXd Hj(3,4);

	//recover state parameters
	float x = x_state(0);
	float y = x_state(1);
	float vx = x_state(2);
	float vy = x_state(3);

	//pre-compute a set of terms to avoid repeated calculation
	float c1 = x*x+y*y;
	float c2 = sqrt(c1);
	float c3 = (c1*c2);

	//Jacobian matrix
	Hj << (x/c2), (y/c2), 0, 0,
		  -(y/c1), (x/c1), 0, 0,
		  y*(vx*y - vy*x)/c3, x*(x*vy - y*vx)/c3, x/c2, y/c2;
	return Hj;
}
